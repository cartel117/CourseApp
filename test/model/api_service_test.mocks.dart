// Mocks generated by Mockito 5.4.3 from annotations
// in arkcentral/test/model/api_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:course_app/Model/api_base.dart'  as _i2;
import 'package:course_app/utils/http_base.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiBase_0 extends _i1.SmartFake implements _i2.ApiBase {
  _FakeApiBase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpBase extends _i1.Mock implements _i3.HttpBase {
  MockHttpBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? _headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          _headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.ApiBase> get(
    String? api,
    String? ip,
    int? port,
    int? timeout, {
    bool? isHttps = true,
    String? credential = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            api,
            ip,
            port,
            timeout,
          ],
          {
            #isHttps: isHttps,
            #credential: credential,
          },
        ),
        returnValue: _i4.Future<_i2.ApiBase>.value(_FakeApiBase_0(
          this,
          Invocation.method(
            #get,
            [
              api,
              ip,
              port,
              timeout,
            ],
            {
              #isHttps: isHttps,
              #credential: credential,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiBase>);

  @override
  _i4.Future<_i2.ApiBase> post(
    String? api,
    dynamic body,
    String? ip,
    int? port,
    int? timeout, {
    bool? isHttps = true,
    String? credential = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            api,
            body,
            ip,
            port,
            timeout,
          ],
          {
            #isHttps: isHttps,
            #credential: credential,
          },
        ),
        returnValue: _i4.Future<_i2.ApiBase>.value(_FakeApiBase_0(
          this,
          Invocation.method(
            #post,
            [
              api,
              body,
              ip,
              port,
              timeout,
            ],
            {
              #isHttps: isHttps,
              #credential: credential,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiBase>);
}
